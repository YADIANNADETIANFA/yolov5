# parameters
nc: 2  # number of classes

# 不同复杂度的yolo模型，精度与速度不同，通过depth_multiple、width_multiple控制
depth_multiple: 0.33  # model depth multiple  模型深度倍数(BottleneckCSP个数)
width_multiple: 0.50  # layer channel multiple  通道倍数    控制Conv通道channel个数(卷积核数量)

# anchors
# 提前预定义好的矩形框
# 定义了3层anchor，每层3个矩形框
anchors:
  - [10,13, 16,30, 33,23]  # P3/8     小检测框，用于检测小目标    3组宽高值
  - [30,61, 62,45, 59,119]  # P4/16   中检测框，用于检测中目标    3组宽高值
  - [116,90, 156,198, 373,326]  # P5/32   大检测框，用于检测大目标    3组宽高值

# YOLOv5 backbone
backbone:
  # [from, number, module, args]
  # from: -1 上一层的输出作为本层的输入
  # number: 该层有几个这样的模块，同时受到 depth_multiple 值的影响
  #     仔细观察发现，只有C3模型的number不是1，其他模块的number都是1
  #     所谓的"该层模块的个数"，实际为"C3模块中bottleneck的个数"
  # module: 表不同的层结构 Focus Conv C3等，定义在common.py
  # args: 各模块传入的参数    [64, 3]   64: 模块输出通道数（同时受到 width_multiple 的影响）
  #           channel, kernel_size, stride, padding, bias等
  [[-1, 1, Focus, [64, 3]],  # P1/2     P1/2: 类比金字塔，P1表金字塔最底的第一层。经过Focus层后，图片尺寸缩小了一半，因此"/2"。综上，P1/2
   [-1, 1, Conv, [128, 3, 2]],  # P2/4
   [-1, 3, C3, [128]],
   [-1, 1, Conv, [256, 3, 2]],  # P3/8
   [-1, 9, C3, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # P4/16
   [-1, 9, C3, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # P5/32
   [-1, 1, SPP, [1024, [5, 9, 13]]],
   [-1, 3, C3, [1024, False]],
  ]

# YOLOv5 head
head:
  # [from, number, module, args]
  [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4
   [-1, 3, C3, [512, False]],

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3, [256, False]],  # (P3/8-small)

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 14], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # (P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # (P5/32-large)

   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
